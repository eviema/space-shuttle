buildscript {
	ext {
		springBootVersion = '1.5.8.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'docker'

group = 'au.com.jiangren'
version = '1.0-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

ext {
	vaadinVersion = '8.1.0'
}


dependencies {

	compile("org.springframework.boot:spring-boot-starter-web") {
		exclude module: "spring-boot-starter-tomcat"
	}
	compile("org.springframework.boot:spring-boot-starter-jetty")
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("mysql:mysql-connector-java")
	compile("com.vaadin:vaadin-spring-boot-starter")
	compile("org.springframework.boot:spring-boot-starter-data-mongodb")
	compile("org.springframework.boot:spring-boot-starter-thymeleaf")
	compile("org.springframework.boot:spring-boot-devtools")
	compile("org.springframework.boot:spring-boot-starter-security")
	compile("org.webjars:bootstrap:3.3.7")

	testCompile("junit:junit")
	testCompile("org.springframework.boot:spring-boot-starter-test")
	testCompile("com.h2database:h2")
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}


dependencyManagement {
	imports {
		mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
	}
}

jar {
	baseName = 'spaceshuttle'
	version = version
}

findbugs {
	ignoreFailures = true
	toolVersion = "3.0.0"
	sourceSets = [sourceSets.main]
	reportsDir = file("$project.buildDir/reports/findbugs")
	effort = "max"
}
tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

task buildDocker(type: Docker, dependsOn: build) {
	applicationName = jar.baseName
	dockerfile = file('Dockerfile')
	doFirst {
		copy {
			from jar
			into "${stageDir}/target"
		}
	}
}

pmd {
	ignoreFailures = true
	sourceSets = [sourceSets.main]
	reportsDir = file("$project.buildDir/reports/pmd")
	ruleSets = [
			"basic",
			"braces"
	]
}

pmdMain {
	ruleSets = ["java-basic", "java-strings", "java-braces"]
}

checkstyle {
	configFile = new File(rootDir, "config/checkstyle.xml")
}
jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled = true
	}
}

check.dependsOn jacocoTestReport
