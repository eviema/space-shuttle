package au.com.jiangren.spaceshuttle.controller;

import au.com.jiangren.spaceshuttle.model.APIResponse;
import au.com.jiangren.spaceshuttle.model.User;
import au.com.jiangren.spaceshuttle.repository.SearchCriteria;
import au.com.jiangren.spaceshuttle.repository.UserRepository;
import au.com.jiangren.spaceshuttle.repository.UserSpecification;
import au.com.jiangren.spaceshuttle.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequestMapping(path = "/users")

public class UserController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    @Qualifier("userService")
    private UserService userService;
    @Autowired
    @Qualifier("facebookUserService")
    private UserService facebookUserService;
    // inject via application.properties
    @Value("${welcome.message:test}")
    private String message = "Hello World";


    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAllUsers();
    }

    @GetMapping(path = "/user/{username}")
    public @ResponseBody
    List<User> getByUsername(@PathVariable("username") String username) {
        // This returns a JSON or XML with the users
        UserSpecification spec =
                new UserSpecification(new SearchCriteria("username", ":", username),
                        new SearchCriteria("name", ":", username)
                );
        return userService.findBySpecification(spec);
    }

    @GetMapping(path = "/user/example/{username}")
    public @ResponseBody
    List<User> getByExampleUsername(@PathVariable("username") String username) {
        User user = new User();
        user.setUsername(username);
        user.setEmail("test@test.com");

        // This returns a JSON or XML with the users
        return userService.findByExample(user);
    }

    @GetMapping(path = "/user/example")
    public @ResponseBody
    List<User> getByExample(@RequestBody User user) {
        return userService.findByExample(user);
    }

    @PostMapping
    public @ResponseBody
    APIResponse addUser(@RequestBody User newUser) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        APIResponse apiResponse = new APIResponse();
        apiResponse.setSuccess(true);
        apiResponse.setResponseObject(userRepository.save(newUser));
        return apiResponse;
    }

    @GetMapping(value = "/{id}")
    public APIResponse getUserById(@PathVariable("id") Long id) {
        APIResponse apiResponse = new APIResponse();
        apiResponse.setSuccess(true);
        apiResponse.setResponseObject(userRepository.findOne(id));
        return apiResponse;

    }

    @DeleteMapping(value = "/{id}")
    public APIResponse deleteUserById(@PathVariable("id") Long id) {
        userRepository.delete(id);
        APIResponse apiResponse = new APIResponse();
        apiResponse.setSuccess(true);
        return apiResponse;
    }

    @PutMapping(value = "/{id}")
    public APIResponse updateUser(@PathVariable("id") Long id, @RequestBody User user) {
        User oldUser = userRepository.findById(id);
        oldUser.setUsername(user.getUsername());
        oldUser.setPassword(user.getPassword());
        User newUser = userRepository.save(oldUser);
        APIResponse apiResponse = new APIResponse();
        apiResponse.setSuccess(true);
        apiResponse.setResponseObject(newUser);
        return apiResponse;
    }
}